{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Luanoids are an alternative to Roblox Humanoids originally written by LPGhatguy as a 2018 Hack Week project . Due to the original project being archived this is a revival of it rebuilt with new APIs that were not available in 2018. Limitations The goal of the original project may have been to fully replace Humanoids while the goal of this project is only partial replacement. The reason for this is Roblox's Humanoids provide first-class support for characters such as R15 and R6 which adds bloat for those who wish to use Humanoids for non-R15/R6 rigs. As a result methods such as GetBodyPartR15() and GetLimb() will not be implemented. Clothing : Support for clothing may be added if a modeler volunteers to UV wrap an R6 and R15 rig that will be provided in the main repository. Swimming : Support for swimming is under consideration due to not all character rigs needing to be able to swim and custom StateControllers are supported for those that need such states. Climbing : Same reason as Swimming Sitting : Same reason as Swimming Tools : Support for the Tool class may be added in the demo place . Reason against this would be providing higher support for R15/R6 rigs and majority of scripts in Tools would not be compatible due to lack of a Humanoid anyway. Until this may or may not be added it is advised to use AddAccessory() for custom tools.","title":"Home"},{"location":"#home","text":"Luanoids are an alternative to Roblox Humanoids originally written by LPGhatguy as a 2018 Hack Week project . Due to the original project being archived this is a revival of it rebuilt with new APIs that were not available in 2018.","title":"Home"},{"location":"#limitations","text":"The goal of the original project may have been to fully replace Humanoids while the goal of this project is only partial replacement. The reason for this is Roblox's Humanoids provide first-class support for characters such as R15 and R6 which adds bloat for those who wish to use Humanoids for non-R15/R6 rigs. As a result methods such as GetBodyPartR15() and GetLimb() will not be implemented. Clothing : Support for clothing may be added if a modeler volunteers to UV wrap an R6 and R15 rig that will be provided in the main repository. Swimming : Support for swimming is under consideration due to not all character rigs needing to be able to swim and custom StateControllers are supported for those that need such states. Climbing : Same reason as Swimming Sitting : Same reason as Swimming Tools : Support for the Tool class may be added in the demo place . Reason against this would be providing higher support for R15/R6 rigs and majority of scripts in Tools would not be compatible due to lack of a Humanoid anyway. Until this may or may not be added it is advised to use AddAccessory() for custom tools.","title":"Limitations"},{"location":"API/","text":"API Properties _preSimConnection {internal} {read-only} {not-replicated} RBXScriptConnection Connection created from ResumeSimulation() . _moveToTarget {internal} {read-only} {not-replicated} Vector3|BasePart Target defined by MoveTo() . _moveToTimeout {internal} {read-only} {not-replicated} number Timeout defined by MoveTo() . _moveToTickStart {internal} {read-only} {not-replicated} number Tick of when MoveTo() was last called. _moveToDeadzoneRadius {internal} {read-only} {not-replicated} number Deadzone radius defined by MoveTo() . Character {read-only} {not-replicated} Model Luanoid's character model. RootPart {read-only} {not-replicated} Part Luanoid.Character.HumanoidRootPart Animator {read-only} {not-replicated} Animator Luanoid.Character.AnimationController.Animator Floor {not-replicated} BasePart Instance the Luanoid is currently standing on. This property should be set by the StateController on each update. RigParts {read-only} {not-replicated} {BasePart} All the BaseParts found after SetRig() is called. Motor6Ds {read-only} {not-replicated} {Motor6D} All the Motor6Ds found after SetRig() is called. State {read-only} {not-replicated} CharacterState State defined by ChangeState() . LastState {read-only} {not-replicated} CharacterState Previous CharacterState overwritten by ChangeState() . StateController {not-replicated} StateController Controller to be used during simulations. AnimationTracks {read-only} {not-replicated} {AnimationTrack} Dictionary of AnimationTracks created from LoadAnimation() MoveDirection Vector3 Direction of character movement. In the default StateController the Y-value is discarded. LookDirection Vector3 Direction character will face. In the default StateController the Y-value is discarded. This value also only gets used if Idling or AutoRotate is false. Health number Character's current health. In the default StateController if this value enters 0 or less the character will enter the state Dead and pause simulation. MaxHealth number Character's max health. WalkSpeed number Character's speed of movement. JumpPower number In the default StateController this is the force multiplied by character AssemblyMass applied when jumping. HipHeight number In the default StateController this is the distance from the bottom of the HumanoidRootPart to the surface the Luanoid is on to define levitation height. AutoRotate boolean In the default StateController this defines if during the Walking state the character should automatically face the direction of travel. Jump boolean In the default StateController this queues the StateController to jump the next time it is run. Methods step {internal} luanoid : step ( dt : number ) Checks if the current machine has network ownership of the Luanoid before calling StateController:step() Destroy luanoid : Destroy () Destroys the Luanoid's character and stops simulation. SetRig luanoid : SetRig ( rig : Model ) Sets the Luanoid's character rig. This model should only contain Attachments, BaseParts, and Motor6Ds. Everything else should be added after calling this method to avoid errors. RemoveRig luanoid : RemoveRig () Destroys all BaseParts in RigParts . ToggleRigCollision luanoid : ToggleRigCollision ( collisionEnabled : boolean ) Sets all RigParts in RigParts to have CanCollide as true or false. LoadAnimation luanoid : LoadAnimation ( animation : Animation , name : string ? ) --> AnimationTrack Loads an animation onto the Luanoid which can be played later by name. PlayAnimation luanoid : PlayAnimation ( name ) Plays an AnimationTrack previously created with LoadAnimation() . StopAnimation luanoid : StopAnimation ( name ) Stops an AnimationTrack previously started with PlayAnimation() StopAnimations luanoid : StopAnimations () Stops all currently playing AnimationTracks. UnloadAnimation luanoid : UnloadAnimation ( name ) Destroys an AnimationTrack previously created with LoadAnimation() from AnimationTracks . UnloadAnimations luanoid : UnloadAnimations () Destroys all AnimationTracks in AnimationTracks . MoveTo luanoid : MoveTo ( target : Vector3 | BasePart , timeout : number ? , deadzoneRadius : number ? ) Sets a target for the Luanoid to travel towards. In the default StateController the Luanoid will take a direct path and not pathfind, this method will also overwrite MoveDirection . If timeout is not defined it will default to 8 seconds. If deadzoneRadius is not defined it will default to a distance of 6 studs from the target's position to the HumanoidRootPart's position. CancelMoveTo luanoid : CancelMoveTo () Stops the Luanoid from travelling to a target previously defined by MoveTo() . TakeDamage luanoid : TakeDamage ( damage : number ) Reduces the Luanoid's health. If a negative value is provided the absolute value will be used. AddAccessory luanoid : AddAccessory ( accessory : Accessory | Model | BasePart , base : Attachment ? | BasePart ? , pivot : CFrame ? ) Mounts an accessory to the character model. If the accessory is an Accessory it will use the first Attachment it can find as the base . If the accessory is a Model or BasePart the base must be defined as an Attachment . The pivot is always calculated automatically but can be overwritten if necessary. RemoveAccessory luanoid : RemoveAccessory ( accessory : Accessory | Model | BasePart ) Destroys an accessory, must be a descendant of luanoid.Character.Accessories . GetAccessories luanoid : GetAccessories () Returns all children of luanoid.Character.Accessories . GetNetworkOwner luanoid : GetNetworkOwner () Returns the desired NetworkOwner defined by SetNetworkowner() . Luanoids use a custom GetNetworkOwner() method due to the native method not allowed on the client, instead this method will return an attribute set by the server of who the NetworkOwner should be. SetNetworkOwner luanoid : SetNetworkOwner ( networkOwner : Player ? ) Sets the Luanoid's desired NetworkOwner . Luanoids use a custom SetNetworkOwner() method due to Roblox having no way to disable automatic network ownership which can be problematic for NPCs that should be simulated by the server. This method is also needed to set an attribute for GetNetworkOwner() to be used on the client. ChangeState luanoid : ChangeState ( characterState : CharacterState ) Sets the Luanoid's new CharacterState. PauseSimulation luanoid : PauseSimulation () Ends simulation of the Luanoid. ResumeSimulation luanoid : ResumeSimulation () Starts or resumes simulation of the Luanoid. This entails binding to RunService and calling step() on every frame. Events StateChanged luanoid . StateChanged : Connect ( function ( newState : CharacterState , oldState : CharacterState ) end ) HealthChanged luanoid . HealthChanged : Connect ( function ( health : number ) end ) AccessoryEquipped luanoid . AccessoryEquipped : Connect ( function ( accessory : Accessory | Model | BasePart ) end ) AccessoryUnequipping luanoid . AccessoryUnequipping : Connect ( function ( accessory : Accessory | Model | BasePart ) end ) MoveToFinished luanoid . MoveToFinished : Connect ( function ( success : boolean ) if success then print ( \"Luanoid reached its target\" ) else print ( \"Luanoid hit an obstacle or timed out\" ) end end ) Died luanoid . Died : Connect ( function ( isDead : boolean ) if isDead then print ( \"Luanoid died\" ) else print ( \"Luanoid was revived\" ) end end ) FreeFalling luanoid . FreeFalling : Connect ( function ( isFalling : boolean ) if isFalling then print ( \"Luanoid is now falling\" ) else print ( \"Luanoid is no longer falling\" ) end end ) Jumping luanoid . Jumping : Connect ( function ( isJumping : boolean ) if isJumping then print ( \"Luanoid is jumping\" ) else print ( \"Luanoid is no longer jumping\" ) end end )","title":"API"},{"location":"API/#api","text":"","title":"API"},{"location":"API/#properties","text":"","title":"Properties"},{"location":"API/#_presimconnection","text":"{internal} {read-only} {not-replicated} RBXScriptConnection Connection created from ResumeSimulation() .","title":"_preSimConnection"},{"location":"API/#_movetotarget","text":"{internal} {read-only} {not-replicated} Vector3|BasePart Target defined by MoveTo() .","title":"_moveToTarget"},{"location":"API/#_movetotimeout","text":"{internal} {read-only} {not-replicated} number Timeout defined by MoveTo() .","title":"_moveToTimeout"},{"location":"API/#_movetotickstart","text":"{internal} {read-only} {not-replicated} number Tick of when MoveTo() was last called.","title":"_moveToTickStart"},{"location":"API/#_movetodeadzoneradius","text":"{internal} {read-only} {not-replicated} number Deadzone radius defined by MoveTo() .","title":"_moveToDeadzoneRadius"},{"location":"API/#character","text":"{read-only} {not-replicated} Model Luanoid's character model.","title":"Character"},{"location":"API/#rootpart","text":"{read-only} {not-replicated} Part Luanoid.Character.HumanoidRootPart","title":"RootPart"},{"location":"API/#animator","text":"{read-only} {not-replicated} Animator Luanoid.Character.AnimationController.Animator","title":"Animator"},{"location":"API/#floor","text":"{not-replicated} BasePart Instance the Luanoid is currently standing on. This property should be set by the StateController on each update.","title":"Floor"},{"location":"API/#rigparts","text":"{read-only} {not-replicated} {BasePart} All the BaseParts found after SetRig() is called.","title":"RigParts"},{"location":"API/#motor6ds","text":"{read-only} {not-replicated} {Motor6D} All the Motor6Ds found after SetRig() is called.","title":"Motor6Ds"},{"location":"API/#state","text":"{read-only} {not-replicated} CharacterState State defined by ChangeState() .","title":"State"},{"location":"API/#laststate","text":"{read-only} {not-replicated} CharacterState Previous CharacterState overwritten by ChangeState() .","title":"LastState"},{"location":"API/#statecontroller","text":"{not-replicated} StateController Controller to be used during simulations.","title":"StateController"},{"location":"API/#animationtracks","text":"{read-only} {not-replicated} {AnimationTrack} Dictionary of AnimationTracks created from LoadAnimation()","title":"AnimationTracks"},{"location":"API/#movedirection","text":"Vector3 Direction of character movement. In the default StateController the Y-value is discarded.","title":"MoveDirection"},{"location":"API/#lookdirection","text":"Vector3 Direction character will face. In the default StateController the Y-value is discarded. This value also only gets used if Idling or AutoRotate is false.","title":"LookDirection"},{"location":"API/#health","text":"number Character's current health. In the default StateController if this value enters 0 or less the character will enter the state Dead and pause simulation.","title":"Health"},{"location":"API/#maxhealth","text":"number Character's max health.","title":"MaxHealth"},{"location":"API/#walkspeed","text":"number Character's speed of movement.","title":"WalkSpeed"},{"location":"API/#jumppower","text":"number In the default StateController this is the force multiplied by character AssemblyMass applied when jumping.","title":"JumpPower"},{"location":"API/#hipheight","text":"number In the default StateController this is the distance from the bottom of the HumanoidRootPart to the surface the Luanoid is on to define levitation height.","title":"HipHeight"},{"location":"API/#autorotate","text":"boolean In the default StateController this defines if during the Walking state the character should automatically face the direction of travel.","title":"AutoRotate"},{"location":"API/#jump","text":"boolean In the default StateController this queues the StateController to jump the next time it is run.","title":"Jump"},{"location":"API/#methods","text":"","title":"Methods"},{"location":"API/#step","text":"{internal} luanoid : step ( dt : number ) Checks if the current machine has network ownership of the Luanoid before calling StateController:step()","title":"step"},{"location":"API/#destroy","text":"luanoid : Destroy () Destroys the Luanoid's character and stops simulation.","title":"Destroy"},{"location":"API/#setrig","text":"luanoid : SetRig ( rig : Model ) Sets the Luanoid's character rig. This model should only contain Attachments, BaseParts, and Motor6Ds. Everything else should be added after calling this method to avoid errors.","title":"SetRig"},{"location":"API/#removerig","text":"luanoid : RemoveRig () Destroys all BaseParts in RigParts .","title":"RemoveRig"},{"location":"API/#togglerigcollision","text":"luanoid : ToggleRigCollision ( collisionEnabled : boolean ) Sets all RigParts in RigParts to have CanCollide as true or false.","title":"ToggleRigCollision"},{"location":"API/#loadanimation","text":"luanoid : LoadAnimation ( animation : Animation , name : string ? ) --> AnimationTrack Loads an animation onto the Luanoid which can be played later by name.","title":"LoadAnimation"},{"location":"API/#playanimation","text":"luanoid : PlayAnimation ( name ) Plays an AnimationTrack previously created with LoadAnimation() .","title":"PlayAnimation"},{"location":"API/#stopanimation","text":"luanoid : StopAnimation ( name ) Stops an AnimationTrack previously started with PlayAnimation()","title":"StopAnimation"},{"location":"API/#stopanimations","text":"luanoid : StopAnimations () Stops all currently playing AnimationTracks.","title":"StopAnimations"},{"location":"API/#unloadanimation","text":"luanoid : UnloadAnimation ( name ) Destroys an AnimationTrack previously created with LoadAnimation() from AnimationTracks .","title":"UnloadAnimation"},{"location":"API/#unloadanimations","text":"luanoid : UnloadAnimations () Destroys all AnimationTracks in AnimationTracks .","title":"UnloadAnimations"},{"location":"API/#moveto","text":"luanoid : MoveTo ( target : Vector3 | BasePart , timeout : number ? , deadzoneRadius : number ? ) Sets a target for the Luanoid to travel towards. In the default StateController the Luanoid will take a direct path and not pathfind, this method will also overwrite MoveDirection . If timeout is not defined it will default to 8 seconds. If deadzoneRadius is not defined it will default to a distance of 6 studs from the target's position to the HumanoidRootPart's position.","title":"MoveTo"},{"location":"API/#cancelmoveto","text":"luanoid : CancelMoveTo () Stops the Luanoid from travelling to a target previously defined by MoveTo() .","title":"CancelMoveTo"},{"location":"API/#takedamage","text":"luanoid : TakeDamage ( damage : number ) Reduces the Luanoid's health. If a negative value is provided the absolute value will be used.","title":"TakeDamage"},{"location":"API/#addaccessory","text":"luanoid : AddAccessory ( accessory : Accessory | Model | BasePart , base : Attachment ? | BasePart ? , pivot : CFrame ? ) Mounts an accessory to the character model. If the accessory is an Accessory it will use the first Attachment it can find as the base . If the accessory is a Model or BasePart the base must be defined as an Attachment . The pivot is always calculated automatically but can be overwritten if necessary.","title":"AddAccessory"},{"location":"API/#removeaccessory","text":"luanoid : RemoveAccessory ( accessory : Accessory | Model | BasePart ) Destroys an accessory, must be a descendant of luanoid.Character.Accessories .","title":"RemoveAccessory"},{"location":"API/#getaccessories","text":"luanoid : GetAccessories () Returns all children of luanoid.Character.Accessories .","title":"GetAccessories"},{"location":"API/#getnetworkowner","text":"luanoid : GetNetworkOwner () Returns the desired NetworkOwner defined by SetNetworkowner() . Luanoids use a custom GetNetworkOwner() method due to the native method not allowed on the client, instead this method will return an attribute set by the server of who the NetworkOwner should be.","title":"GetNetworkOwner"},{"location":"API/#setnetworkowner","text":"luanoid : SetNetworkOwner ( networkOwner : Player ? ) Sets the Luanoid's desired NetworkOwner . Luanoids use a custom SetNetworkOwner() method due to Roblox having no way to disable automatic network ownership which can be problematic for NPCs that should be simulated by the server. This method is also needed to set an attribute for GetNetworkOwner() to be used on the client.","title":"SetNetworkOwner"},{"location":"API/#changestate","text":"luanoid : ChangeState ( characterState : CharacterState ) Sets the Luanoid's new CharacterState.","title":"ChangeState"},{"location":"API/#pausesimulation","text":"luanoid : PauseSimulation () Ends simulation of the Luanoid.","title":"PauseSimulation"},{"location":"API/#resumesimulation","text":"luanoid : ResumeSimulation () Starts or resumes simulation of the Luanoid. This entails binding to RunService and calling step() on every frame.","title":"ResumeSimulation"},{"location":"API/#events","text":"","title":"Events"},{"location":"API/#statechanged","text":"luanoid . StateChanged : Connect ( function ( newState : CharacterState , oldState : CharacterState ) end )","title":"StateChanged"},{"location":"API/#healthchanged","text":"luanoid . HealthChanged : Connect ( function ( health : number ) end )","title":"HealthChanged"},{"location":"API/#accessoryequipped","text":"luanoid . AccessoryEquipped : Connect ( function ( accessory : Accessory | Model | BasePart ) end )","title":"AccessoryEquipped"},{"location":"API/#accessoryunequipping","text":"luanoid . AccessoryUnequipping : Connect ( function ( accessory : Accessory | Model | BasePart ) end )","title":"AccessoryUnequipping"},{"location":"API/#movetofinished","text":"luanoid . MoveToFinished : Connect ( function ( success : boolean ) if success then print ( \"Luanoid reached its target\" ) else print ( \"Luanoid hit an obstacle or timed out\" ) end end )","title":"MoveToFinished"},{"location":"API/#died","text":"luanoid . Died : Connect ( function ( isDead : boolean ) if isDead then print ( \"Luanoid died\" ) else print ( \"Luanoid was revived\" ) end end )","title":"Died"},{"location":"API/#freefalling","text":"luanoid . FreeFalling : Connect ( function ( isFalling : boolean ) if isFalling then print ( \"Luanoid is now falling\" ) else print ( \"Luanoid is no longer falling\" ) end end )","title":"FreeFalling"},{"location":"API/#jumping","text":"luanoid . Jumping : Connect ( function ( isJumping : boolean ) if isJumping then print ( \"Luanoid is jumping\" ) else print ( \"Luanoid is no longer jumping\" ) end end )","title":"Jumping"},{"location":"Guide/Installation/","text":"Installation Roblox Studio Users that only use Roblox Studio should install Luanoid through the releases page . Download Luanoid.rbxm from the latest release and insert it into studio. Rojo Rojo users can install Luanoid into their project directory as a submodule with this git command. git submodule add https://github.com/Rythian2277/Luanoid","title":"Installation"},{"location":"Guide/Installation/#installation","text":"","title":"Installation"},{"location":"Guide/Installation/#roblox-studio","text":"Users that only use Roblox Studio should install Luanoid through the releases page . Download Luanoid.rbxm from the latest release and insert it into studio.","title":"Roblox Studio"},{"location":"Guide/Installation/#rojo","text":"Rojo users can install Luanoid into their project directory as a submodule with this git command. git submodule add https://github.com/Rythian2277/Luanoid","title":"Rojo"}]}